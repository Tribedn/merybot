import random
import string
import os
import yt_dlp
import re
from datetime import datetime
from Crypto.Cipher import AES
from Crypto.Util.Padding import pad, unpad
import base64
import requests
import uuid
from moviepy.editor import VideoFileClip
from functools import wraps
from dp import cur_bot
from botcfg import bot
from functools import wraps
from botcfg import DOWNLOADS_FOLDER

def check_subscription(func):
    @wraps(func)
    def wrapper(message, *args, **kwargs):
        user_id = message.from_user.id
        cur_bot.execute("SELECT * FROM users WHERE user_id = ?", (user_id,))
        user = cur_bot.fetchone()

        if user and user[4] == False:  # –Ø–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –ø—ñ–¥–ø–∏—Å–∞–Ω–∏–π
            bot.send_message(message.chat.id, "‚ùå –¢–∏ –Ω–µ –ø—ñ–¥–ø–∏—Å–∞–Ω–∏–π –Ω–∞ –∫–∞–Ω–∞–ª. –ü—ñ–¥–ø–∏—à–∏—Å—å, —â–æ–± –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ç–∏—Å—è –≤—Å—ñ–º–∞ —Ñ—É–Ω–∫—Ü—ñ—è–º–∏.")
        else:
            return func(message, *args, **kwargs)  # –í–∏–∫–æ–Ω–∞—Ç–∏ —Ö–µ–Ω–¥–ª–µ—Ä, —è–∫—â–æ –ø—ñ–¥–ø–∏—Å–∫–∞ —î
    return wrapper


def encrypt_aes(text, key):
    cipher = AES.new(key, AES.MODE_CBC, key)
    ciphertext = cipher.encrypt(pad(text.encode(), AES.block_size))
    return base64.b64encode(ciphertext).decode()

def decrypt_aes(encoded_text, key):
    cipher = AES.new(key, AES.MODE_CBC, key)
    decrypted = cipher.decrypt(encoded_text) 
    return unpad(decrypted, AES.block_size).decode()

def split_text(text, max_length=4096):
    """
    –†–æ–∑–¥—ñ–ª—è—î —Ç–µ–∫—Å—Ç –Ω–∞ —á–∞—Å—Ç–∏–Ω–∏, –∫–æ–∂–Ω–∞ –∑ —è–∫–∏—Ö –Ω–µ –ø–µ—Ä–µ–≤–∏—â—É—î max_length —Å–∏–º–≤–æ–ª—ñ–≤.
    """
    return [text[i:i + max_length] for i in range(0, len(text), max_length)]


def sanitize_filename(filename):
    """
    –í–∏–¥–∞–ª—è—î –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ñ —Å–∏–º–≤–æ–ª–∏ –∑ –Ω–∞–∑–≤–∏ —Ñ–∞–π–ª—É.
    """
    return re.sub(r'[<>:"/\\|?*]', '_', filename)


def ensure_downloads_folder_exists(downloads_folder):
    if not os.path.exists(downloads_folder):
        os.makedirs(downloads_folder)


def download_mp3(url, downloads_folder="downloads"):
    """–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∞—É–¥—ñ–æ –∑ YouTube –∞–±–æ YouTube Music"""
    try:
        ensure_downloads_folder_exists(downloads_folder)
        output_path = os.path.join(downloads_folder, "%(title)s.%(ext)s")
        ydl_opts = {
            "outtmpl": output_path,
            "format": "bestaudio/best",
            "postprocessors": [{
                "key": "FFmpegExtractAudio",
                "preferredcodec": "mp3",
                "preferredquality": "192",
            }]
        }
        with yt_dlp.YoutubeDL(ydl_opts) as ydl:
            info = ydl.extract_info(url, download=True)
            filename = ydl.prepare_filename(info).replace(".webm", ".mp3").replace(".m4a", ".mp3")
            title = info.get("title", "Unknown")
        return filename, title, None
    except Exception as e:
        return None, None, f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}"

def download_mp3_tiktok(url, downloads_folder="downloads"):
    """–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∞—É–¥—ñ–æ –∑ YouTube –∞–±–æ YouTube Music"""
    try:
        ensure_downloads_folder_exists(downloads_folder)
        output_path = os.path.join(downloads_folder, "%(title)s.%(ext)s")
        ydl_opts = {
            "outtmpl": output_path,
            "format": "bestaudio/best",
            "postprocessors": [{
                "key": "FFmpegExtractAudio",
                "preferredcodec": "mp3",
                "preferredquality": "192",
            }]
        }
        with yt_dlp.YoutubeDL(ydl_opts) as ydl:
            info = ydl.extract_info(url, download=True)
            filename = ydl.prepare_filename(info).replace(".webm", ".mp3").replace(".m4a", ".mp3")
            title = info.get("title", "Unknown")
        return filename, title, None
    except Exception as e:
        return None, None, f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}"

def download_mp3_instagram(url, downloads_folder="downloads"):
    """–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∞—É–¥—ñ–æ –∑ YouTube –∞–±–æ YouTube Music"""
    try:
        ensure_downloads_folder_exists(downloads_folder)
        output_path = os.path.join(downloads_folder, "%(title)s.%(ext)s")
        ydl_opts = {
            "outtmpl": output_path,
            "format": "bestaudio/best",
            "postprocessors": [{
                "key": "FFmpegExtractAudio",
                "preferredcodec": "mp3",
                "preferredquality": "192",
            }]
        }
        with yt_dlp.YoutubeDL(ydl_opts) as ydl:
            info = ydl.extract_info(url, download=True)
            filename = ydl.prepare_filename(info).replace(".webm", ".mp3").replace(".m4a", ".mp3")
            title = info.get("title", "Unknown")
        return filename, title, None
    except Exception as e:
        return None, None, f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}"
    
def download_tiktok(url, downloads_folder="downloads"):
    """–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∞—É–¥—ñ–æ –∑ TikTok —á–µ—Ä–µ–∑ API tikwm —Ç–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—è —É MP3"""
    try:
        if not url:
            return None, None, "‚ö†Ô∏è –ü–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ TikTok –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –ø–æ—Ä–æ–∂–Ω—ñ–º."

        ensure_downloads_folder_exists(downloads_folder)

        # üîó –ó–∞–ø–∏—Ç –¥–æ tikwm API
        api_url = f"https://tikwm.com/api/?url={url}"
        response = requests.get(api_url)

        if response.status_code != 200:
            return None, None, f"‚ùå API –Ω–µ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î. –ö–æ–¥: {response.status_code}"

        data = response.json()

        # üì¶ –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
        if not data.get("data") or not data["data"].get("play"):
            return None, None, "‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –≤—ñ–¥–µ–æ –∑ API. –ú–æ–∂–ª–∏–≤–æ, –≤—ñ–¥–µ–æ –ø—Ä–∏–≤–∞—Ç–Ω–µ –∞–±–æ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–µ."

        # üé• –û—Ç—Ä–∏–º—É—î–º–æ –≤—ñ–¥–µ–æ —Ç–∞ —à–ª—è—Ö–∏
        video_url = data["data"]["play"]
        title = sanitize_filename(data["data"].get("title") or f"audio_{uuid.uuid4()}")
        video_path = os.path.join(downloads_folder, f"{title}.mp4")
        audio_path = os.path.join(downloads_folder, f"{title}.mp3")

        # üì• –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –≤—ñ–¥–µ–æ
        video_response = requests.get(video_url)
        if video_response.status_code != 200:
            return None, None, f"‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –≤—ñ–¥–µ–æ. –ö–æ–¥: {video_response.status_code}"

        with open(video_path, "wb") as f:
            f.write(video_response.content)

        # üéß –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—è —É MP3
        clip = VideoFileClip(video_path)
        clip.audio.write_audiofile(audio_path, logger=None)
        clip.close()

        # üßπ –í–∏–¥–∞–ª—è—î–º–æ –≤—ñ–¥–µ–æ –ø—ñ—Å–ª—è –æ–±—Ä–æ–±–∫–∏
        os.remove(video_path)

        return audio_path, title, None

    except Exception as e:
        return None, None, f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}"

def escape_markdown(text, version=2):
    """
    –ï–∫—Ä–∞–Ω—É—î —Å–ø–µ—Ü—ñ–∞–ª—å–Ω—ñ —Å–∏–º–≤–æ–ª–∏ –¥–ª—è Markdown –∞–±–æ MarkdownV2.
    """
    escape_chars = r'_*[]()~`>#+-=|{}.!'
    if version == 2:
        escape_chars += r'\\'
    return ''.join(f'\\{char}' if char in escape_chars else char for char in text)

def generate_random_string(length=8):
    return ''.join(random.choices(string.ascii_lowercase + string.digits, k=length))

def download_video_youtube(url, custom_label="youtube_video"):
    try:
        ensure_downloads_folder_exists(DOWNLOADS_FOLDER)

        random_id = generate_random_string()
        filename_prefix = f"{random_id}_{custom_label}"
        output_path = os.path.join(DOWNLOADS_FOLDER, f"{sanitize_filename(filename_prefix)}.%(ext)s")

        ydl_opts = {
            "outtmpl": output_path,
            "format": "bestvideo+bestaudio/best",
            "merge_output_format": "mp4",
            "socket_timeout": 120,  # ‚è±Ô∏è –¢—É—Ç —Ç–∏ –º–æ–∂–µ—à –ø–æ—Å—Ç–∞–≤–∏—Ç–∏ –Ω–∞–≤—ñ—Ç—å 120 –∞–±–æ –±—ñ–ª—å—à–µ —Å–µ–∫—É–Ω–¥
        }


        with yt_dlp.YoutubeDL(ydl_opts) as ydl:
            info = ydl.extract_info(url, download=True)
            filename = ydl.prepare_filename(info)
            filename = filename.replace(".webm", ".mp4").replace(".m4a", ".mp4")  # –£–Ω—ñ—Ñ—ñ–∫–∞—Ü—ñ—è

        return filename, None
    except Exception as e:
        return None, f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –≤—ñ–¥–µ–æ: {e}"